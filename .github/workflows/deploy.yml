name: デプロイワークフロー

on:
  push:
    branches:
      - main  # メインブランチへのプッシュ時に実行
  workflow_dispatch:  # 手動実行も可能

env:
  AWS_REGION: ap-northeast-1  # 東京リージョン
  STACK_NAME: CdkStack

jobs:
  build-ui:
    name: UIのビルド
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './get-satellite-image/ui/package-lock.json'

      - name: UI依存関係のインストール
        run: |
          cd get-satellite-image/ui
          npm ci

      - name: UIのビルド
        run: |
          cd get-satellite-image/ui
          npm run build

      - name: UIビルド成果物のアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ui-build
          path: get-satellite-image/ui/dist
          retention-days: 1

  deploy-lambda-postgis:
    name: PostGIS拡張用Lambdaのデプロイ
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: Pythonのセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 依存関係のインストール
        run: |
          cd get-satellite-image/lambda/postgis-extension
          pip install -r requirements.txt -t .

      - name: Lambdaデプロイパッケージの作成
        run: |
          cd get-satellite-image/lambda/postgis-extension
          zip -r ../postgis-extension.zip .

      - name: Lambdaパッケージのアップロード
        uses: actions/upload-artifact@v4
        with:
          name: postgis-extension-lambda
          path: get-satellite-image/lambda/postgis-extension.zip
          retention-days: 1

  deploy-cdk:
    name: CDKデプロイ
    runs-on: ubuntu-latest
    needs: [build-ui, deploy-lambda-postgis]
    permissions:
      id-token: write  # OIDCトークン取得のために必要
      contents: read

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: UIビルド成果物のダウンロード
        uses: actions/download-artifact@v4
        with:
          name: ui-build
          path: get-satellite-image/ui/dist

      - name: PostGIS Lambdaパッケージのダウンロード
        uses: actions/download-artifact@v4
        with:
          name: postgis-extension-lambda
          path: get-satellite-image/lambda
          
      - name: Lambdaパッケージの展開と確認
        run: |
          # ダウンロードしたzipファイルを展開してpostgis-extensionディレクトリに配置
          echo "Lambdaパッケージの展開を開始します"
          mkdir -p get-satellite-image/lambda/postgis-extension
          unzip -o get-satellite-image/lambda/postgis-extension.zip -d get-satellite-image/lambda/postgis-extension
          
          # ファイルが正しく展開されたか確認
          echo "Lambdaディレクトリの内容:"
          ls -la get-satellite-image/lambda/
          echo "Lambdaパッケージの内容:"
          ls -la get-satellite-image/lambda/postgis-extension/
          
          # 必要なファイルがあるか確認
          if [ ! -f get-satellite-image/lambda/postgis-extension/index.py ]; then
            echo "ERROR: index.pyが見つかりません"
            # 必要なファイルがない場合は、リポジトリから直接コピー
            cp -r get-satellite-image/lambda/postgis-extension-orig/* get-satellite-image/lambda/postgis-extension/ 2>/dev/null || true
          fi

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './get-satellite-image/cdk/package-lock.json'

      - name: AWS認証の設定
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  # GitHubActionsからAWSリソースにアクセスするためのロール
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK依存関係のインストール
        run: |
          cd get-satellite-image/cdk
          npm ci

      - name: LambdaパッケージのS3アップロード
        run: |
          # LambdaパッケージをS3に直接アップロード
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          LAMBDA_BUCKET="lambda-packages-${{ env.AWS_REGION }}-${ACCOUNT_ID}"
          
          # S3バケットが存在するか確認
          if ! aws s3 ls s3://${LAMBDA_BUCKET} 2>/dev/null; then
            echo "Creating Lambda S3 bucket: ${LAMBDA_BUCKET}"
            aws s3 mb s3://${LAMBDA_BUCKET} --region ${{ env.AWS_REGION }}
          else
            echo "Lambda S3 bucket already exists: ${LAMBDA_BUCKET}"
          fi
          
          # Lambdaパッケージをアップロード
          echo "Uploading Lambda package to S3"
          cd get-satellite-image/lambda/postgis-extension
          zip -r ../postgis-extension-deploy.zip .
          aws s3 cp ../postgis-extension-deploy.zip s3://${LAMBDA_BUCKET}/postgis-extension.zip
          
          # 環境変数に設定
          echo "LAMBDA_BUCKET=${LAMBDA_BUCKET}" >> $GITHUB_ENV
          echo "LAMBDA_KEY=postgis-extension.zip" >> $GITHUB_ENV
      
      - name: S3バケットの作成
        run: |
          # テンプレート保存用のS3バケットを作成
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          # バケット名は小文字で、ハイフンのみ使用可能
          TEMPLATE_BUCKET="cf-templates-$(echo ${{ env.STACK_NAME }} | tr '[:upper:]' '[:lower:]')-${{ env.AWS_REGION }}-${ACCOUNT_ID}"
          
          # バケットが存在するか確認
          if ! aws s3 ls s3://${TEMPLATE_BUCKET} 2>/dev/null; then
            echo "Creating S3 bucket: ${TEMPLATE_BUCKET}"
            aws s3 mb s3://${TEMPLATE_BUCKET} --region ${{ env.AWS_REGION }}
          else
            echo "S3 bucket already exists: ${TEMPLATE_BUCKET}"
          fi
          
          # バケット名を環境変数に設定
          echo "TEMPLATE_BUCKET=${TEMPLATE_BUCKET}" >> $GITHUB_ENV
      
      - name: CDKスタックの合成とデプロイ
        id: deploy
        continue-on-error: true
        run: |
          # Lambdaコードの参照先を一時的に修正
          cd get-satellite-image/cdk
          
          # cdk-stack.tsを修正してS3からLambdaコードを読み込むようにする
          if grep -q "lambda.Code.fromAsset('../lambda/postgis-extension'" lib/cdk-stack.ts; then
            sed -i "s|lambda.Code.fromAsset('../lambda/postgis-extension'.*)|lambda.Code.fromBucket(s3.Bucket.fromBucketName(this, 'LambdaCodeBucket', '${LAMBDA_BUCKET}'), '${LAMBDA_KEY}')|g" lib/cdk-stack.ts
            echo "Modified cdk-stack.ts to use S3 bucket for Lambda code"
            grep -A 2 "Lambda.Code.from" lib/cdk-stack.ts
          fi
          
          cd get-satellite-image/cdk
          
          # CDKの設定ファイルを作成してブートストラップチェックをスキップ
          mkdir -p ~/.cdk
          echo '{"version":"1.0.0","bootstrapStackVersionSsmParameter":"","requireApproval":"never"}' > ~/.cdk/config.json
          
          # CloudFormationテンプレートを生成
          npx cdk synth ${{ env.STACK_NAME }} --no-version-reporting > template.yaml
          
          # 通知メッセージを除外
          sed -i '/NOTICES/,/cdk acknowledge/d' template.yaml
          
          # CloudFormationスタックをデプロイ
          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name ${{ env.STACK_NAME }} \
            --s3-bucket ${TEMPLATE_BUCKET} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --no-fail-on-empty-changeset
      
      - name: スタックイベントの取得と表示
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "スタックデプロイが失敗しました。イベントを確認します。"
          aws cloudformation describe-stack-events --stack-name ${{ env.STACK_NAME }} --query "StackEvents[?ResourceStatus=='CREATE_FAILED' || ResourceStatus=='UPDATE_FAILED'].{Status:ResourceStatus,Reason:ResourceStatusReason,LogicalId:LogicalResourceId,Timestamp:Timestamp}" --output table

      - name: デプロイ結果の取得
        id: outputs
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
          UI_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='UiEndpoint'].OutputValue" --output text)
          DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='DatabaseEndpoint'].OutputValue" --output text)
          S3_BUCKET=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Resources[?LogicalResourceId=='SatelliteImageUiBucket'].PhysicalResourceId" --output text)
          echo "API_ENDPOINT=${API_ENDPOINT}" >> $GITHUB_ENV
          echo "UI_ENDPOINT=${UI_ENDPOINT}" >> $GITHUB_ENV
          echo "DB_ENDPOINT=${DB_ENDPOINT}" >> $GITHUB_ENV
          echo "S3_BUCKET=${S3_BUCKET}" >> $GITHUB_ENV
      
      - name: UIファイルをS3にアップロード
        run: |
          echo "UIファイルをS3バケットにアップロードします: ${S3_BUCKET}"
          aws s3 sync get-satellite-image/ui/dist s3://${S3_BUCKET} --delete
          
          # CloudFrontキャッシュを無効化
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Resources[?LogicalResourceId=='SatelliteImageDistribution'].PhysicalResourceId" --output text)
          if [ ! -z "${DISTRIBUTION_ID}" ]; then
            echo "CloudFrontキャッシュを無効化します: ${DISTRIBUTION_ID}"
            aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"
          fi

      - name: デプロイ結果の出力
        run: |
          echo "デプロイが完了しました！"
          echo "APIエンドポイント: ${API_ENDPOINT}"
          echo "UIエンドポイント: ${UI_ENDPOINT}"
          echo "データベースエンドポイント: ${DB_ENDPOINT}"
