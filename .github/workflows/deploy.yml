name: デプロイワークフロー

on:
  push:
    branches:
      - main  # メインブランチへのプッシュ時に実行
  workflow_dispatch:  # 手動実行も可能

env:
  AWS_REGION: ap-northeast-1  # 東京リージョン
  STACK_NAME: CdkStack

jobs:
  build-ui:
    name: UIのビルド
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './get-satellite-image/ui/package-lock.json'

      - name: UI依存関係のインストール
        run: |
          cd get-satellite-image/ui
          npm ci

      - name: UIのビルド
        run: |
          cd get-satellite-image/ui
          npm run build

      - name: UIビルド成果物のアップロード
        uses: actions/upload-artifact@v4
        with:
          name: ui-build
          path: get-satellite-image/ui/dist
          retention-days: 1

  deploy-lambda-postgis:
    name: PostGIS拡張用Lambdaのデプロイ
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: Pythonのセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: 依存関係のインストール
        run: |
          cd get-satellite-image/lambda/postgis-extension
          pip install -r requirements.txt -t .

      - name: Lambdaデプロイパッケージの作成
        run: |
          cd get-satellite-image/lambda/postgis-extension
          zip -r ../postgis-extension.zip .

      - name: Lambdaパッケージのアップロード
        uses: actions/upload-artifact@v4
        with:
          name: postgis-extension-lambda
          path: get-satellite-image/lambda/postgis-extension.zip
          retention-days: 1

  deploy-cdk:
    name: CDKデプロイ
    runs-on: ubuntu-latest
    needs: [build-ui, deploy-lambda-postgis]
    permissions:
      id-token: write  # OIDCトークン取得のために必要
      contents: read

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: UIビルド成果物のダウンロード
        uses: actions/download-artifact@v4
        with:
          name: ui-build
          path: get-satellite-image/ui/dist

      - name: PostGIS Lambdaパッケージのダウンロード
        uses: actions/download-artifact@v4
        with:
          name: postgis-extension-lambda
          path: get-satellite-image/lambda

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './get-satellite-image/cdk/package-lock.json'

      - name: AWS認証の設定
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  # GitHubActionsからAWSリソースにアクセスするためのロール
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK依存関係のインストール
        run: |
          cd get-satellite-image/cdk
          npm ci

      - name: AWS CLIでCDKブートストラップのセットアップ
        run: |
          # 必要なIAMポリシーを作成
          aws iam create-role --role-name CDKBootstrapRole --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"cloudformation.amazonaws.com"},"Action":"sts:AssumeRole"}]}' || true
          aws iam attach-role-policy --role-name CDKBootstrapRole --policy-arn arn:aws:iam::aws:policy/AdministratorAccess || true
          
          # S3バケットを作成
          aws s3 mb s3://cdk-bootstrap-${{ env.AWS_REGION }}-$(aws sts get-caller-identity --query Account --output text) || true
          
      - name: CDKスタックのデプロイ
        run: |
          cd get-satellite-image/cdk
          # デプロイ前に環境変数を設定して通知を無効化
          export JSII_SILENCE_WARNING_DEPRECATED_NODE_VERSION=1
          export CDK_DISABLE_VERSION_CHECK=1
          
          # デプロイの実行
          npx cdk deploy ${{ env.STACK_NAME }} \
            --require-approval never \
            --verbose \
            --toolkit-stack-name CDKToolkit \
            --force

      - name: デプロイ結果の取得
        id: outputs
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
          UI_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='UiEndpoint'].OutputValue" --output text)
          DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='DatabaseEndpoint'].OutputValue" --output text)
          echo "API_ENDPOINT=${API_ENDPOINT}" >> $GITHUB_ENV
          echo "UI_ENDPOINT=${UI_ENDPOINT}" >> $GITHUB_ENV
          echo "DB_ENDPOINT=${DB_ENDPOINT}" >> $GITHUB_ENV

      - name: デプロイ結果の出力
        run: |
          echo "デプロイが完了しました！"
          echo "APIエンドポイント: ${API_ENDPOINT}"
          echo "UIエンドポイント: ${UI_ENDPOINT}"
          echo "データベースエンドポイント: ${DB_ENDPOINT}"
