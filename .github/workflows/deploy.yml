name: デプロイワークフロー

on:
  push:
    branches:
      - main # メインブランチへのプッシュ時に実行
  workflow_dispatch: # 手動実行も可能

env:
  AWS_REGION: ap-northeast-1 # 東京リージョン
  STACK_NAME: CdkStack

jobs:
  deploy-lambda-postgis:
    name: PostGIS拡張用Lambdaのデプロイ
    runs-on: ubuntu-latest
    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: Pythonのセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"

      - name: 依存関係のインストール
        run: |
          # get-satellite-image/lambdaディレクトリで作業
          cd get-satellite-image/lambda/postgis-extension
          pip install -r requirements.txt -t .

      - name: Lambdaデプロイパッケージの作成
        run: |
          cd get-satellite-image/lambda/postgis-extension
          zip -r ../postgis-extension.zip .

      - name: Lambdaパッケージのアップロード
        uses: actions/upload-artifact@v4
        with:
          name: postgis-extension-lambda
          path: get-satellite-image/lambda/postgis-extension.zip
          retention-days: 1

  deploy-cdk:
    name: CDKデプロイ
    runs-on: ubuntu-latest
    needs: deploy-lambda-postgis
    permissions:
      id-token: write # OIDCトークン取得のために必要
      contents: read

    steps:
      - name: CDKキャッシュ削除
        run: rm -rf get-satellite-image/cdk/cdk.out

      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # これで全履歴

      - name: PostGIS Lambdaパッケージのダウンロード
        uses: actions/download-artifact@v4
        with:
          name: postgis-extension-lambda
          path: get-satellite-image/lambda

      - name: Lambdaパッケージの展開と確認
        run: |
          LAMBDA_DIR="get-satellite-image/lambda/postgis-extension"
          if [ ! -d "$LAMBDA_DIR" ]; then
            mkdir -p "$LAMBDA_DIR"
          fi
          if [ -f get-satellite-image/lambda/postgis-extension.zip ]; then
            unzip -o get-satellite-image/lambda/postgis-extension.zip -d "$LAMBDA_DIR"
          fi
          ls -la get-satellite-image/lambda/
          ls -la "$LAMBDA_DIR" || echo "ディレクトリは空か存在しません"

      - name: Lambda関数コードの準備
        run: |
          cd get-satellite-image/cdk
          if [ ! -d "postgis-extension" ]; then
            mkdir -p postgis-extension
          fi
          cp -r ../lambda/postgis-extension/* postgis-extension/ 2>/dev/null || true
          ls -la postgis-extension/

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          # cache: "pnpm"
          # cache-dependency-path: ./get-satellite-image/cdk/pnpm-lock.yaml

      - name: pnpmのインストール
        run: npm install -g pnpm

      - name: AWS認証の設定
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK依存関係のインストール
        run: |
          cd get-satellite-image/cdk
          pnpm install

      - name: S3バケットの作成
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          TEMPLATE_BUCKET="cf-templates-$(echo ${{ env.STACK_NAME }} | tr '[:upper:]' '[:lower:]')-${{ env.AWS_REGION }}-${ACCOUNT_ID}"
          if ! aws s3 ls s3://${TEMPLATE_BUCKET} 2>/dev/null; then
            aws s3 mb s3://${TEMPLATE_BUCKET} --region ${{ env.AWS_REGION }}
          fi
          echo "TEMPLATE_BUCKET=${TEMPLATE_BUCKET}" >> $GITHUB_ENV

      - name: CDK Synth Check
        run: |
          cd get-satellite-image/cdk
          pnpm cdk synth CdkStack -vvv

      - name: CDKスタックの合成とデプロイ
        id: deploy
        continue-on-error: true
        run: |
          cd get-satellite-image/cdk
          pnpm cdk deploy ${{ env.STACK_NAME }} --require-approval never -vvv --asset-parallelism 1

      - name: スタックイベントの取得と表示
        if: steps.deploy.outcome == 'failure'
        run: |
          aws cloudformation describe-stack-events --stack-name ${{ env.STACK_NAME }} --query "StackEvents[?ResourceStatus=='CREATE_FAILED' || ResourceStatus=='UPDATE_FAILED'].{Status:ResourceStatus,Reason:ResourceStatusReason,LogicalId:LogicalResourceId,Timestamp:Timestamp}" --output table

      - name: デプロイ結果の取得
        id: outputs
        run: |
          API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
          UI_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='UiEndpoint'].OutputValue" --output text)
          DB_ENDPOINT=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='DatabaseEndpoint'].OutputValue" --output text)
          echo "API_ENDPOINT=${API_ENDPOINT}" >> $GITHUB_ENV
          echo "UI_ENDPOINT=${UI_ENDPOINT}" >> $GITHUB_ENV
          echo "DB_ENDPOINT=${DB_ENDPOINT}" >> $GITHUB_ENV
          aws cloudformation list-stack-resources --stack-name ${{ env.STACK_NAME }} > stack-resources.json
          S3_BUCKET=$(cat stack-resources.json | jq -r '.StackResourceSummaries[] | select(.ResourceType=="AWS::S3::Bucket") | .PhysicalResourceId')
          DISTRIBUTION_ID=$(cat stack-resources.json | jq -r '.StackResourceSummaries[] | select(.LogicalResourceId=="SatelliteImageDistribution") | .PhysicalResourceId')

          echo "S3バケット名: ${S3_BUCKET}"
          echo "S3_BUCKET=${S3_BUCKET}" >> $GITHUB_ENV

      - name: pnpmのインストール
        run: npm install -g pnpm

      - name: UIファイルをS3にアップロード
        run: |
          # UIビルド（pnpm install & build）
          cd get-satellite-image/ui
          pnpm install
          pnpm build
          # config.json生成
          echo "{ \"apiEndpoint\": \"${API_ENDPOINT}\" }" > dist/config.json
          cat dist/config.json

          echo "distディレクトリの中身確認:"
          ls -l dist

          echo "UIファイルをS3バケットにアップロードします: ${S3_BUCKET}"
          aws s3 sync dist s3://${S3_BUCKET} --delete
          cd ../../..

          # S3バケット名が取得できているか確認
          if [ -z "${S3_BUCKET}" ] || [ "${S3_BUCKET}" = "None" ] || [ "${S3_BUCKET}" = "null" ]; then
            echo "S3バケット名が取得できていません。CloudFormationスタックから手動で取得します。"
            # スタックリソースを再取得
            aws cloudformation list-stack-resources --stack-name ${{ env.STACK_NAME }} > stack-resources.json

            # すべてのリソースを表示して確認
            echo "\nすべてのリソース一覧:"
            cat stack-resources.json | jq -r '.StackResourceSummaries[] | "\(.LogicalResourceId): \(.PhysicalResourceId)"'

            # まずResourceTypeで探す
            S3_BUCKET=$(cat stack-resources.json | jq -r '.StackResourceSummaries[] | select(.ResourceType=="AWS::S3::Bucket") | .PhysicalResourceId')

            # もし取得できない場合は、論理IDでも試す
            if [ -z "${S3_BUCKET}" ] || [ "${S3_BUCKET}" = "null" ]; then
              echo "ResourceTypeで取得できなかったため、論理IDで試します"
              S3_BUCKET=$(cat stack-resources.json | jq -r '.StackResourceSummaries[] | select(.LogicalResourceId=="SatelliteImageUiBucket") | .PhysicalResourceId')
            fi

            echo "再取得したS3バケット名: ${S3_BUCKET}"

            # まだ取得できない場合はエラー
            if [ -z "${S3_BUCKET}" ] || [ "${S3_BUCKET}" = "None" ] || [ "${S3_BUCKET}" = "null" ]; then
              echo "ERROR: S3バケット名を取得できませんでした。UIファイルのアップロードをスキップします。"
              exit 0
            fi

            # バケット名が再取得できた場合のみ再アップロード
            cd get-satellite-image/ui
            aws s3 sync dist s3://${S3_BUCKET} --delete
            cd ../../..
          fi

          # CloudFrontキャッシュを無効化
          DISTRIBUTION_ID=$(aws cloudformation list-stack-resources --stack-name ${{ env.STACK_NAME }} | jq -r '.StackResourceSummaries[] | select(.LogicalResourceId=="SatelliteImageDistribution") | .PhysicalResourceId')
          if [ ! -z "${DISTRIBUTION_ID}" ]; then
            echo "CloudFrontキャッシュを無効化します: ${DISTRIBUTION_ID}"
            aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"
          fi

      - name: デプロイ結果の出力
        run: |
          echo "デプロイが完了しました！"
          echo "APIエンドポイント: ${API_ENDPOINT}"
          echo "UIエンドポイント: ${UI_ENDPOINT}"
          echo "データベースエンドポイント: ${DB_ENDPOINT}"
